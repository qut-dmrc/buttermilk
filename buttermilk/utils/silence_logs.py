"""
Utility to silence noisy logs from various libraries.
This can be imported and used directly without waiting for the main BM setup_logging process.
"""

import logging


def silence_task_logs():
    """
    Silence the noisy logging messages from task execution, fsspec, and autogen_core.
    This is especially useful for quieting the console output from asyncio tasks.
"""

    # --- Quieten overly verbose libraries directly ---

    logging.getLogger("googleapiclient").setLevel(logging.WARNING)
    logging.getLogger("google.auth").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("requests").setLevel(logging.WARNING)
    # Silence noisy asyncio, fsspec, and autogen_core logs
    logging.getLogger("asyncio").setLevel(logging.ERROR)
    logging.getLogger("fsspec").setLevel(logging.ERROR)
    logging.getLogger("autogen_core").setLevel(logging.WARNING)
    logging.getLogger("autogen_core._single_threaded_agent_runtime").setLevel(logging.ERROR)
    # Silence task execution logging from asyncio.tasks
    logging.getLogger("asyncio.tasks").setLevel(logging.ERROR)
    # Silence any other SingleThreadedAgentRuntime related logs
    logging.getLogger("Task").setLevel(logging.ERROR)
    # Add any other libraries that are too noisy

    # Turn off some particularly annoying (and unresolvable) warnings generated by upstream libraries
    import warnings

    warnings.filterwarnings(
        action="ignore",
        message="unclosed",
        category=ResourceWarning,
    )
    warnings.filterwarnings(
        action="ignore",
        module="msal",
        category=DeprecationWarning,
    )
    warnings.filterwarnings(
        action="ignore",
        message="The `dict` method is deprecated",
        module="promptflow-tracing",
        category=DeprecationWarning,
    )
    warnings.filterwarnings(
        action="ignore",
        module="traceloop",
        category=DeprecationWarning,
    )
    # warnings.filterwarnings(
    #     action="ignore",
    #     message="Passing field metadata as keyword arguments is deprecated",
    # )
    warnings.filterwarnings(
        action="ignore",
        message="`sentry_sdk.Hub` is deprecated",
        category=DeprecationWarning,
    )
    # warnings.filterwarnings(
    #     action="ignore",
    #     message="Support for class-based `config` is deprecated",
    #     category=DeprecationWarning,
    # )
    warnings.filterwarnings(
        action="ignore",
        module="marshmallow",
        category=Warning,
    )
    warnings.filterwarnings(
        action="ignore",
        message="jsonschema.RefResolver is deprecated",
        # category=DeprecationWarning,
        module="flask_restx",
    )
    warnings.filterwarnings(
        action="ignore",
        message="CropBox missing from",
    )

    # Silence asyncio task execution logs
    logging.getLogger("asyncio").setLevel(logging.ERROR)
    logging.getLogger("asyncio.tasks").setLevel(logging.ERROR)
    logging.getLogger("Task").setLevel(logging.ERROR)

    # Weave warnings and errors - comprehensive suppression
    logging.getLogger("weave").setLevel(logging.ERROR)
    logging.getLogger("weave.trace").setLevel(logging.ERROR)
    logging.getLogger("weave.client").setLevel(logging.ERROR)
    logging.getLogger("weave.weave_client").setLevel(logging.ERROR)
    logging.getLogger("weave.trace.weave_client").setLevel(logging.ERROR)
    logging.getLogger("weave.wandb_api").setLevel(logging.ERROR)
    logging.getLogger("weave.api").setLevel(logging.ERROR)
    
    # Additional weave-related loggers that might output connection errors
    logging.getLogger("httpx").setLevel(logging.ERROR)
    logging.getLogger("httpcore").setLevel(logging.ERROR)

    # Silence fsspec logs
    logging.getLogger("fsspec").setLevel(logging.ERROR)
    logging.getLogger("fsspec.asyn").setLevel(logging.ERROR)

    # Silence autogen_core logs
    logging.getLogger("autogen_core").setLevel(logging.WARNING)
    logging.getLogger("autogen_core._single_threaded_agent_runtime").setLevel(logging.ERROR)

# Automatically silence logs when module is imported
silence_task_logs()

if __name__ == "__main__":
    print("Silenced noisy task execution logs.")
